generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  username      String?         @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  password      String?
  accounts      Account[]
  Authenticator Authenticator[]
  folders       Folder[]
  quizzes       Quiz[]
  sessions      Session[]
  ratings       Rating[]
  QuizProgress  QuizProgress[]
  bookmarks      Bookmark[]
  imageUrl      String?

  @@index([email]) // Index for faster email lookups
}

model Folder {
  id         String   @id @default(cuid())
  title      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  parentId   String?
  parent     Folder?  @relation("Subfolders", fields: [parentId], references: [id], onDelete: Cascade)
  subfolders Folder[] @relation("Subfolders")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizzes    Quiz[]
}

model Quiz {
  id           String         @id @default(cuid())
  title        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  categories   String[]
  description  String
  visibility   Visibility     @default(PUBLIC)
  folderId     String?
  userId       String
  questions    Question[]
  foldersn       Folder?        @relation(fields: [folderId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  ratings      Rating[]
  QuizProgress QuizProgress[]
  bookmarks     Bookmark[]
  imageUrl     String?
  playCount    Int            @default(0) // Field to track how many times the quiz has been played

  @@index([title, createdAt]) // Index for faster querying by title and creation date
}

model Question {
  id            String       @id @default(cuid())
  type          QuestionType
  question      String?
  correctAnswer String?
  quizId        String
  questionOrder Int
  categories    Category[] // Array of categories (enum)
  items         Item[]
  timeLimit     Int
  points        Int
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  imageUrl      String?
}

model Item {
  id         String    @id @default(cuid())
  text       String
  match      String?
  isCorrect  Boolean?
  order      Int?
  isBlank    Boolean?
  questionId String?
  Question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  imageUrl   String?
}

model Rating {
  id        String   @id @default(cuid())
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  rating Int
}

model Bookmark {
  id     String @id @default(cuid())
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId, quizId])
}

model QuizProgress {
  id                String    @id @default(cuid()) // Unique identifier for the progress record
  userId            String // Reference to the User
  quizId            String // Reference to the Quiz
  currentQuestion   Int // Tracks the current question number
  isCompleted       Boolean   @default(false) // Whether the quiz is completed
  startedAt         DateTime  @default(now()) // Time when the quiz started
  completedAt       DateTime? // Time when the quiz was completed, null if not completed
  lastUpdated       DateTime  @updatedAt // Time of the last update to the progress
  playQuizQuestions Json[]
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz              Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([userId, quizId]) // Ensures only one progress record per quiz per user
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token]) // Ensure uniqueness for email, token, and type
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum QuestionType {
  UNSELECTED
  PICK_ANSWER
  TRUE_FALSE
  FILL_IN_THE_BLANK
  SHORT_ANSWER
  MATCHING_PAIRS
  ORDER
}

enum Category {
  SCIENCE
  MATH
  HISTORY
  GEOGRAPHY
  LITERATURE
  TECHNOLOGY
  SPORTS
  ART
  LANGUAGE
  GENERAL_KNOWLEDGE
  POLITICS
  ECONOMICS
  PHILOSOPHY
  PSYCHOLOGY
  BIOLOGY
  CHEMISTRY
  PHYSICS
  COMPUTER_SCIENCE
  RELIGION
  NATURE
  EDUCATION
}
