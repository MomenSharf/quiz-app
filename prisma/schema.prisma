generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  username      String?         @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  password      String?
  accounts      Account[]
  Authenticator Authenticator[]
  folders       Folder[]
  images        Image[]
  quizzes       Quiz[]
  sessions      Session[]
}

model Folder {
  id         String   @id @default(cuid())
  title      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  parentId   String?
  parent     Folder?  @relation("Subfolders", fields: [parentId], references: [id], onDelete: Cascade)
  subfolders Folder[] @relation("Subfolders")
  user       User     @relation(fields: [userId], references: [id])
  quizzes    Quiz[]
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categories  String[]
  description String
  visibility  Visibility @default(PUBLIC)
  folderId    String?
  userId      String
  imageId     String?
  questions   Question[]
  folder      Folder?    @relation(fields: [folderId], references: [id], onDelete: Cascade)
  image       Image?     @relation(fields: [imageId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
}

model Question {
  id            String       @id @default(cuid())
  type          QuestionType
  question      String?
  correctAnswer String?
  quizId        String
  questionOrder Int
  imageId       String?
  items         Items[]
  image         Image?       @relation(fields: [imageId], references: [id], onDelete: Cascade)
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Items {
  id         String    @id @default(cuid())
  text       String
  match      String?
  isCorrect  Boolean?
  order      Int?
  isBlank    Boolean?
  questionId String?
  imageId    String?
  Question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Image {
  id            String     @id @default(cuid())
  uploadthingId String
  url           String
  userId        String?
  User          User?      @relation(fields: [userId], references: [id])
  Question      Question[]
  Quiz          Quiz[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum QuestionType {
  UNSELECTED
  PICK_ANSWER
  TRUE_FALSE
  FILL_IN_THE_BLANK
  SHORT_ANSWER
  MATCHING_PAIRS
  ORDER
}


