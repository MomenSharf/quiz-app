datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  username      String?         @unique
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  quizzes    Quiz[]
  likes      Like[]
  bookmarked Bookmarked[]
  Progress   Progress[]
  scores     Score[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  questions   Question[]
  categories  String[]
  difficulty  Difficulty
  visibility Visibility @default(PUBLIC)

  progress   Progress[]
  likes      Like[]
  score      Score[]
  bookmarked Bookmarked[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}
enum Visibility {
  PUBLIC
  PRIVATE
}

model Question {
  id             String       @id @default(cuid())
  type           QuestionType
  question       String
  options        Option[]
  correctAnswer  String? // For single-choice and multiple-choice
  correctAnswers String[] // For multiple-choice
  order          String[] // For order questions
  codeSnippet    String? // For code questions
  imageUrl       String? // For picture-choice questionscture

  progress Progress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quiz   Quiz   @relation(fields: [quizId], references: [id])
  quizId String
}

model Option {
  id         Int      @id @default(autoincrement())
  questionId String
  label      String
  question   Question @relation(fields: [questionId], references: [id])
}

enum QuestionType {
  UNSPECIFIED
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
  SHORT_ANSWER
  LONG_ANSWER
  MATCHING
  ORDER
  RANKING
  PICTURE_CHOICE
  DRAG_AND_DROP
  INTERACTIVE
  CODE
}

model Progress {
  id    String   @id @default(cuid())
  score Score[]
  timer DateTime @default(now())
  tries Int      @default(5)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User      @relation(fields: [userId], references: [id])
  userId            String
  quiz              Quiz      @relation(fields: [quizId], references: [id])
  quizId            String
  question          Question? @relation(fields: [currentQuestionId], references: [id])
  currentQuestionId String
}

model Score {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId     String
  progress   Progress @relation(fields: [progressId], references: [id])
  progressId String

  score Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, quizId, progressId])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Like {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId String

  @@id([userId, quizId])
}

model Bookmarked {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId String

  @@id([userId, quizId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
