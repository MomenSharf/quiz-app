datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  username      String?      @unique
  password      String?
  ResetTokens   ResetToken[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  folders Folder[]
  quizzes Quiz[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Folder {
  id    String @id @default(cuid())
  title String

  subfolders Folder[] @relation("Subfolders")

  quizzes Quiz[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  parentId String?
  parent   Folder? @relation("Subfolders", fields: [parentId], references: [id])
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  categories  String[]
  difficulty  Difficulty
  visibility  Visibility @default(PUBLIC)
  questions   Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User    @relation(fields: [userId], references: [id])
  userId   String
  folder   Folder? @relation(fields: [folderId], references: [id])
  folderId String?
}

model Question {
  id             String       @id @default(cuid())
  type           QuestionType
  questionOrder  Int
  question       String?
  options        String[] // Optional, used for multipleChoice, matching, pictureChoice
  correctAnswer  String? // Optional, used for singleChoice, fillInTheBlank, shortAnswer, longAnswer, interactive, code
  correctAnswers String[] // Optional, used for multipleChoice
  pairs Json[]          
  correctOrder   String[] // Optional, used for order
  imagesOptions Json[]          
  codeSnippet    String? // Optional, used for code
  quizId         String
  quiz           Quiz         @relation(fields: [quizId], references: [id])
}

// model Pairs {
//   id         String  @id @default(cuid())
//   item       String
//   match      String? // Optional, used for
//   questionId String
//   question        Question @relation(fields: [questionId], references: [id]) matching
// }

// model Item {
//   id              String   @id @default(cuid())
//   item            String
//   match           String? // Optional, used for matching
//   correctPosition Int? // Optional, used for dragAndDrop
//   questionId      String
//   question        Question @relation(fields: [questionId], references: [id])
// }

enum Visibility {
  PUBLIC
  PRIVATE
}

enum QuestionType {
  UNSELECTED
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
  SHORT_ANSWER
  MATCHING_PAIRS
  ORDER
  PICK_IMAGE
  CODE

}

// model Progress {
//   id    String   @id @default(cuid())
//   score Score[]
//   timer DateTime @default(now())
//   tries Int      @default(5)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user              User      @relation(fields: [userId], references: [id])
//   userId            String
//   quiz              Quiz      @relation(fields: [quizId], references: [id])
//   quizId            String
//   question          Question? @relation(fields: [currentQuestionId], references: [id])
//   currentQuestionId String
// }

// model Score {
//   user       User     @relation(fields: [userId], references: [id])
//   userId     String
//   quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
//   quizId     String
//   progress   Progress @relation(fields: [progressId], references: [id])
//   progressId String

//   score Int

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@id([userId, quizId, progressId])
// }

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

// model Like {
//   user   User   @relation(fields: [userId], references: [id])
//   userId String
//   quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
//   quizId String

//   @@id([userId, quizId])
// }

// model Bookmarked {
//   user   User   @relation(fields: [userId], references: [id])
//   userId String
//   quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
//   quizId String

//   @@id([userId, quizId])
// }

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
